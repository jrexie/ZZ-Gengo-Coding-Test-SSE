Technical Notes

Assumptions:
- Non-alphabet characters are ignored
- A single alphabet character is palindromic

----------------------------------------
Level 1: Check if string is a palindrome

Algorithm:
1. Cleanup string 
1.1. remove all non-alphabet characters
1.2. convert each character to lower case
time: O(n), space: O(n)

2. Create a reversed version of the string
time: O(n), space: O(n)

3. If the cleaned-up string and reversed copy is the same, 
string is a palindrome; otherwise, not a palindrome
time: O(n), space: O(n)

Overall complexity: time: O(n), space: O(n)
----------------------------------------

Level 2: Get longest palindromic substring

Algorithm:
1. Cleanup string 
1.1. remove all non-alphabet characters
1.2 convert each character to lower case
time: O(n), space: O(n)

2. Create a list of all substrings
time: O(n choose k), space: O(n choose k)

3. Remove original word from the list of substrings

4. Check each substring in the list until the first palindromic substring is found

Overall complexity: O(n choose k), space: O(n choose k)
----------------------------------------

Level 3: Get minimum number of string split such that all resulting substrings are palindromic

Algorithm:
1. Cleanup string 
1.1. remove all non-alphabet characters
1.2. convert each character to lower case
time: O(n), space: O(n)

2. While string is not completely split,
2.1. Get longest palindromic substring 
time: O(n choose k), space: O(n choose k)

2.2. Add substring to substring list
time: O(1), space: O(1)

2.3. Remove the substring from the string
time: O(n), space: O(n)

2.4. Check if current string is palindromic
time: O(n), space: O(n)

2.5. Add current string to substring list, if palindromic
time: O(1), space: O(1)

3. Return the number of elements in the substring list minus 1
time: O(1), space: O(1)

Overall complexity: O(n choose k), space: O(n choose k)